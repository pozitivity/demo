package ru.tatiana.demo.repository;

import org.apache.poi.util.ArrayUtil;
import org.springframework.stereotype.Repository;
import ru.tatiana.demo.model.District;
import ru.tatiana.demo.model.Indicator;
import ru.tatiana.demo.model.Score;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Tatyana on 24.05.2017.
 */
@Repository
public class HriRepository {

    public List<District> getDistricts() {
        List<District> districts = new ArrayList<>();
        districts.add(new District(0L, "Центральный федеральный округ"));
        districts.add(new District(1L, "Северо-Западный федеральный округ"));
        districts.add(new District(2L, "Южный федеральный округ"));
        districts.add(new District(3L, "Северо-Кавказский федеральный округ"));
        districts.add(new District(4L, "Поволжский федеральный округ"));
        districts.add(new District(5L, "Уральский федеральный округ"));
        districts.add(new District(6L, "Сибирский федеральный округ"));
        districts.add(new District(7L, "Дальневосточный федеральный округ"));
        districts.add(new District(8L, "Крымский федеральный округ"));
        return districts;
    }

    public List<Score> getScores() {
        List<Score> scores = new ArrayList<>();
        // ЦФО
        Map<Long, Score.Value> value = new HashMap<>();
        value.put(1995L, new Score.Value( 0F,80.3F));
        value.put(2000L, new Score.Value(0F, 76.8F));
        value.put(2005L, new Score.Value(0F, 50.3F));
        value.put(2010L, new Score.Value(0F, 59F));
        value.put(2015L, new Score.Value(0F, 62.8F));
        scores.add(new Score(0L, 0L, 1L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 73.32F, 74.6F));
        value.put(2000L, new Score.Value(73.2F, 87.1F));
        value.put(2005L, new Score.Value(72.89F, 59.5F));
        value.put(2010L, new Score.Value(74.7F, 65.4F));
        value.put(2015L, new Score.Value(76.6F, 66.7F));
        scores.add(new Score(1L, 0L, 2L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(60.8F, 85.9F));
        value.put(2000L, new Score.Value(60.72F, 66.4F));
        value.put(2005L, new Score.Value(59.6F, 41.1F));
        value.put(2010L, new Score.Value(59.6F, 52.5F));
        value.put(2015L, new Score.Value(59.6F, 58.8F));
        scores.add(new Score(2L, 0L, 3L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 30.5F));
        value.put(2000L, new Score.Value(0F, 29F));
        value.put(2005L, new Score.Value(0F,30.2F));
        value.put(2010L, new Score.Value(0F,31.4F));
        value.put(2015L, new Score.Value(0F,34.8F));
        scores.add(new Score(3L, 0L, 4L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(15.32F,26.6F));
        value.put(2000L, new Score.Value(16.08F,18.7F));
        value.put(2005L, new Score.Value(17.5F,10.2F));
        value.put(2010L, new Score.Value(15.56F,11.9F));
        value.put(2015L, new Score.Value(13.7F,21.6F));
        scores.add(new Score(4L, 0L, 5L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(16.7F,89.5F));
        value.put(2000L, new Score.Value(15.1F,68.9F));
        value.put(2005L, new Score.Value(11.6F,74.5F));
        value.put(2010L, new Score.Value(7.6F,72.3F));
        value.put(2015L, new Score.Value(6.9F,83F));
        scores.add(new Score(5L, 0L, 6L, value));
        value = new HashMap<>();
        value.put(2000L, new Score.Value(38.6F,79.6F));
        value.put(2005L, new Score.Value(28.3F,74.4F));
        value.put(2010L, new Score.Value(18.72F,75.7F));
        value.put(2015L, new Score.Value(11.72F,45.2F));
        scores.add(new Score(6L, 0L, 7L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(72.63F,21F));
        value.put(2000L, new Score.Value(64.9F,22.8F));
        value.put(2005L, new Score.Value(66.6F,24.9F));
        value.put(2010L, new Score.Value(52.5F,28.8F));
        value.put(2015L, new Score.Value(47F,35F));
        scores.add(new Score(7L, 0L, 8L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(40.23F,20.3F));
        value.put(2000L,  new Score.Value(44F,8.7F));
        value.put(2005L,  new Score.Value(58.9F,23.6F));
        value.put(2010L,  new Score.Value(66.3F,15F));
        value.put(2015L,  new Score.Value(64.6F,20.5F));
        scores.add(new Score(8L, 0L, 9L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(239F,2.6F));
        value.put(2000L,  new Score.Value(231F,0.8F));
        value.put(2005L,  new Score.Value(228.4F,0.7F));
        value.put(2010L,  new Score.Value(230.3F,1.4F));
        value.put(2015L,  new Score.Value(221.2F,6.1F));
        scores.add(new Score(9L, 0L, 10L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(862F,13.6F));
        value.put(2000L,  new Score.Value(928.1F,6.5F));
        value.put(2005L,  new Score.Value(1039F,2.4F));
        value.put(2010L,  new Score.Value(957.4F,4.2F));
        value.put(2015L,  new Score.Value(750.76F,23.5F));
        scores.add(new Score(10L, 0L, 11L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(185.1F,40.6F));
        value.put(2000L,  new Score.Value(192.5F,28F));
        value.put(2005L,  new Score.Value(206.6F,30.5F));
        value.put(2010L,  new Score.Value(151.7F,41.7F));
        value.put(2015L,  new Score.Value(109.8F,43.6F));
        scores.add(new Score(11L, 0L, 12L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(0F,78.8F));
        value.put(2000L,  new Score.Value(0F,90.1F));
        value.put(2005L,  new Score.Value(0F,62.2F));
        value.put(2010L,  new Score.Value(0F,67.9F));
        value.put(2015L,  new Score.Value(0F,59.4F));
        scores.add(new Score(12L, 0L, 13L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(50F,78.8F));
        value.put(2000L, new Score.Value(66.2F,90.1F));
        value.put(2005L, new Score.Value(62.86F,95.6F));
        value.put(2010L, new Score.Value(58.62F,94.8F));
        value.put(2015L, new Score.Value(43.26F,82.8F));
        scores.add(new Score(13L, 0L, 14L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(317.25F,69.3F));
        value.put(2010L, new Score.Value(326.2F,89.1F));
        value.put(2015L, new Score.Value(327.1F,91.3F));
        scores.add(new Score(14L, 0L, 15L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(25.2F,100F));
        value.put(2010L, new Score.Value(24.4F,100F));
        value.put(2015L, new Score.Value(25F,71F));
        scores.add(new Score(15L, 0L, 16L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(9.675F,22.6F));
        value.put(2010L, new Score.Value(10.2F,31F));
        value.put(2015L, new Score.Value(10.53F,39.6F));
        scores.add(new Score(16L, 0L, 17L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(22.5F,69.3F));
        value.put(2010L, new Score.Value(23.4F,89.1F));
        value.put(2015L, new Score.Value(23.8F,91.3F));
        scores.add(new Score(17L, 0L, 18L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(82.4F,53F));
        value.put(2010L, new Score.Value(83.7F,59.6F));
        value.put(2015L, new Score.Value(86.3F,29F));
        scores.add(new Score(18L, 0L, 19L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,20.2F));
        value.put(2000L, new Score.Value(0F,16.8F));
        value.put(2005L, new Score.Value(0F,19F));
        value.put(2010L, new Score.Value(0F,22.7F));
        value.put(2015L, new Score.Value(0F,32.3F));
        scores.add(new Score(19L, 0L, 20L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(-6.4F,20.3F));
        value.put(2000L, new Score.Value(-8.8F,16.9F));
        value.put(2005L, new Score.Value(-9.1F,8.6F));
        value.put(2010L, new Score.Value(-5.82F,14.3F));
        value.put(2015L, new Score.Value(-2.4F,8F));
        scores.add(new Score(20L, 0L, 21L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(62.2F,62.2F));
        value.put(2000L, new Score.Value(30F,30F));
        value.put(2005L, new Score.Value(29.9F,29.9F));
        value.put(2010L, new Score.Value(40.6F,40.6F));
        value.put(2015L, new Score.Value(80F,80F));
        scores.add(new Score(21L, 0L, 22L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(8.83F,56.6F));
        value.put(2000L, new Score.Value(7.28F,7.8F));
        value.put(2005L, new Score.Value(8.48F,18.5F));
        value.put(2010L, new Score.Value(10.1F,13.2F));
        value.put(2015L, new Score.Value(11.3F,8.8F));
        scores.add(new Score(22L, 0L, 23L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,93.5F));
        value.put(2000L, new Score.Value(0F,77F));
        value.put(2005L, new Score.Value(0F,59.3F));
        value.put(2010L, new Score.Value(0F,62.4F));
        value.put(2015L, new Score.Value(0F,49.5F));
        scores.add(new Score(23L, 0L, 24L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(252F,96.2F));
        value.put(2000L, new Score.Value(265.5F,83.3F));
        value.put(2005L, new Score.Value(271.4F,76.6F));
        value.put(2010L, new Score.Value(269.3F,77.9F));
        value.put(2015L, new Score.Value(270.8F,78.4F));
        scores.add(new Score(24L, 0L, 25L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(131F,90.8F));
        value.put(2000L, new Score.Value(124.2F,70.7F));
        value.put(2005L, new Score.Value(117.2F,69F));
        value.put(2010L, new Score.Value(103.2F,57.3F));
        value.put(2015L, new Score.Value(86.6F,31.3F));
        scores.add(new Score(25L, 0L, 26L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(50.9F,72.3F));
        value.put(2010L, new Score.Value(52.7F,71F));
        value.put(2015L, new Score.Value(50.8F,58F));
        scores.add(new Score(26L, 0L, 27L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(90.2F,19.1F));
        value.put(2010L, new Score.Value(91.2F,43.4F));
        value.put(2015L, new Score.Value(86.3F,30.2F));
        scores.add(new Score(27L, 0L, 28L, value));

        // СЗФО
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 0F,51.7F));
        value.put(2000L, new Score.Value(0F, 59.6F));
        value.put(2005L, new Score.Value(0F, 22.8F));
        value.put(2010L, new Score.Value(0F, 43.85F));
        value.put(2015L, new Score.Value(0F, 56.1F));
        scores.add(new Score(0L, 1L, 1L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 72.1F, 55.9F));
        value.put(2000L, new Score.Value(72.4F, 67.1F));
        value.put(2005L, new Score.Value(71.15F, 30.4F));
        value.put(2010L, new Score.Value(73.8F, 50.6F));
        value.put(2015L, new Score.Value(76.4F, 63.8F));
        scores.add(new Score(1L, 1L, 2L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(59.78F, 47.5F));
        value.put(2000L, new Score.Value(60F, 52F));
        value.put(2005L, new Score.Value(57.4F, 15.1F));
        value.put(2010L, new Score.Value(61.4F, 37.1F));
        value.put(2015L, new Score.Value(65.4F, 48.4F));
        scores.add(new Score(2L, 1L, 3L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 37.2F));
        value.put(2000L, new Score.Value(0F, 37.2F));
        value.put(2005L, new Score.Value(0F,30.7F));
        value.put(2010L, new Score.Value(0F,32F));
        value.put(2015L, new Score.Value(0F,32.4F));
        scores.add(new Score(3L, 1L, 4L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(14F,40.3F));
        value.put(2000L, new Score.Value(14.9F,39F));
        value.put(2005L, new Score.Value(17.7F,8F));
        value.put(2010L, new Score.Value(15.5F,12.9F));
        value.put(2015L, new Score.Value(13.6F,23.5F));
        scores.add(new Score(4L, 1L, 5L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(16.7F,89.2F));
        value.put(2000L, new Score.Value(13.9F,85.4F));
        value.put(2005L, new Score.Value(10.6F,86.2F));
        value.put(2010L, new Score.Value(6.7F,84.7F));
        value.put(2015L, new Score.Value(5.8F,94.8F));
        scores.add(new Score(5L, 1L, 6L, value));
        value = new HashMap<>();
        value.put(2000L, new Score.Value(37.5F, 81.6F));
        value.put(2005L, new Score.Value(23.62F, 85.9F));
        value.put(2010L, new Score.Value(17.82F, 80F));
        value.put(2015L, new Score.Value(14.24F, 28.7F));
        scores.add(new Score(6L, 1L, 7L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(53.5F, 41.8F));
        value.put(2000L, new Score.Value(51.4F,38.8F));
        value.put(2005L, new Score.Value(62.6F,29.4F));
        value.put(2010L, new Score.Value(51.7F,29.9F));
        value.put(2015L, new Score.Value(45F,37.8F));
        scores.add(new Score(7L, 1L, 8L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(36.7F,27.4F));
        value.put(2000L,  new Score.Value(40.7F,15.6F));
        value.put(2005L,  new Score.Value(64.8F,16F));
        value.put(2010L,  new Score.Value(73.3F,6F));
        value.put(2015L,  new Score.Value(67.4F,17F));
        scores.add(new Score(8L, 1L, 9L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(223.5F,8.4F));
        value.put(2000L,  new Score.Value(226F,3F));
        value.put(2005L,  new Score.Value(227.5F,1F));
        value.put(2010L,  new Score.Value(229.2F,1.9F));
        value.put(2015L,  new Score.Value(232.4F,1.3F));
        scores.add(new Score(9L, 1L, 10L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(767.8F,23F));
        value.put(2000L,  new Score.Value(839.8F,15.4F));
        value.put(2005L,  new Score.Value(1015.9F,4.6F));
        value.put(2010L,  new Score.Value(894.8F,10.5F));
        value.put(2015L,  new Score.Value(762.6F,22.3F));
        scores.add(new Score(10L, 0L, 11L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(218.9F,29.8F));
        value.put(2000L,  new Score.Value(217.6F,18.5F));
        value.put(2005L,  new Score.Value(255.2F,14.1F));
        value.put(2010L,  new Score.Value(181.1F,30.4F));
        value.put(2015L,  new Score.Value(129.4F,33.6F));
        scores.add(new Score(11L, 0L, 12L, value));

        // TODO: Up true data, below false data
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(0F,78.8F));
        value.put(2000L,  new Score.Value(0F,90.1F));
        value.put(2005L,  new Score.Value(0F,62.2F));
        value.put(2010L,  new Score.Value(0F,67.9F));
        value.put(2015L,  new Score.Value(0F,59.4F));
        scores.add(new Score(12L, 0L, 13L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(50F,78.8F));
        value.put(2000L, new Score.Value(66.2F,90.1F));
        value.put(2005L, new Score.Value(62.86F,95.6F));
        value.put(2010L, new Score.Value(58.62F,94.8F));
        value.put(2015L, new Score.Value(43.26F,82.8F));
        scores.add(new Score(13L, 0L, 14L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(317.25F,69.3F));
        value.put(2010L, new Score.Value(326.2F,89.1F));
        value.put(2015L, new Score.Value(327.1F,91.3F));
        scores.add(new Score(14L, 0L, 15L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(25.2F,100F));
        value.put(2010L, new Score.Value(24.4F,100F));
        value.put(2015L, new Score.Value(25F,71F));
        scores.add(new Score(15L, 0L, 16L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(9.675F,22.6F));
        value.put(2010L, new Score.Value(10.2F,31F));
        value.put(2015L, new Score.Value(10.53F,39.6F));
        scores.add(new Score(16L, 0L, 17L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(22.5F,69.3F));
        value.put(2010L, new Score.Value(23.4F,89.1F));
        value.put(2015L, new Score.Value(23.8F,91.3F));
        scores.add(new Score(17L, 0L, 18L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(82.4F,53F));
        value.put(2010L, new Score.Value(83.7F,59.6F));
        value.put(2015L, new Score.Value(86.3F,29F));
        scores.add(new Score(18L, 0L, 19L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,20.2F));
        value.put(2000L, new Score.Value(0F,16.8F));
        value.put(2005L, new Score.Value(0F,19F));
        value.put(2010L, new Score.Value(0F,22.7F));
        value.put(2015L, new Score.Value(0F,32.3F));
        scores.add(new Score(19L, 0L, 20L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(-6.4F,20.3F));
        value.put(2000L, new Score.Value(-8.8F,16.9F));
        value.put(2005L, new Score.Value(-9.1F,8.6F));
        value.put(2010L, new Score.Value(-5.82F,14.3F));
        value.put(2015L, new Score.Value(-2.4F,8F));
        scores.add(new Score(20L, 0L, 21L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(62.2F,62.2F));
        value.put(2000L, new Score.Value(30F,30F));
        value.put(2005L, new Score.Value(29.9F,29.9F));
        value.put(2010L, new Score.Value(40.6F,40.6F));
        value.put(2015L, new Score.Value(80F,80F));
        scores.add(new Score(21L, 0L, 22L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(8.83F,56.6F));
        value.put(2000L, new Score.Value(7.28F,7.8F));
        value.put(2005L, new Score.Value(8.48F,18.5F));
        value.put(2010L, new Score.Value(10.1F,13.2F));
        value.put(2015L, new Score.Value(11.3F,8.8F));
        scores.add(new Score(22L, 0L, 23L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,93.5F));
        value.put(2000L, new Score.Value(0F,77F));
        value.put(2005L, new Score.Value(0F,59.3F));
        value.put(2010L, new Score.Value(0F,62.4F));
        value.put(2015L, new Score.Value(0F,49.5F));
        scores.add(new Score(23L, 0L, 24L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(252F,96.2F));
        value.put(2000L, new Score.Value(265.5F,83.3F));
        value.put(2005L, new Score.Value(271.4F,76.6F));
        value.put(2010L, new Score.Value(269.3F,77.9F));
        value.put(2015L, new Score.Value(270.8F,78.4F));
        scores.add(new Score(24L, 0L, 25L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(131F,90.8F));
        value.put(2000L, new Score.Value(124.2F,70.7F));
        value.put(2005L, new Score.Value(117.2F,69F));
        value.put(2010L, new Score.Value(103.2F,57.3F));
        value.put(2015L, new Score.Value(86.6F,31.3F));
        scores.add(new Score(25L, 0L, 26L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(50.9F,72.3F));
        value.put(2010L, new Score.Value(52.7F,71F));
        value.put(2015L, new Score.Value(50.8F,58F));
        scores.add(new Score(26L, 0L, 27L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(90.2F,19.1F));
        value.put(2010L, new Score.Value(91.2F,43.4F));
        value.put(2015L, new Score.Value(86.3F,30.2F));
        scores.add(new Score(27L, 0L, 28L, value));

        // ЮФО
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 0F,80.3F));
        value.put(2000L, new Score.Value(0F, 76.8F));
        value.put(2005L, new Score.Value(0F, 50.3F));
        value.put(2010L, new Score.Value(0F, 59F));
        value.put(2015L, new Score.Value(0F, 62.8F));
        scores.add(new Score(0L, 0L, 1L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 73.32F, 74.6F));
        value.put(2000L, new Score.Value(73.2F, 87.1F));
        value.put(2005L, new Score.Value(72.89F, 59.5F));
        value.put(2010L, new Score.Value(74.7F, 65.4F));
        value.put(2015L, new Score.Value(76.6F, 66.7F));
        scores.add(new Score(1L, 0L, 2L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(60.8F, 85.9F));
        value.put(2000L, new Score.Value(60.72F, 66.4F));
        value.put(2005L, new Score.Value(59.6F, 41.1F));
        value.put(2010L, new Score.Value(59.6F, 52.5F));
        value.put(2015L, new Score.Value(59.6F, 58.8F));
        scores.add(new Score(2L, 0L, 3L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 30.5F));
        value.put(2000L, new Score.Value(0F, 29F));
        value.put(2005L, new Score.Value(0F,30.2F));
        value.put(2010L, new Score.Value(0F,31.4F));
        value.put(2015L, new Score.Value(0F,34.8F));
        scores.add(new Score(3L, 0L, 4L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(15.32F,26.6F));
        value.put(2000L, new Score.Value(16.08F,18.7F));
        value.put(2005L, new Score.Value(17.5F,10.2F));
        value.put(2010L, new Score.Value(15.56F,11.9F));
        value.put(2015L, new Score.Value(13.7F,21.6F));
        scores.add(new Score(4L, 0L, 5L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(16.7F,89.5F));
        value.put(2000L, new Score.Value(15.1F,68.9F));
        value.put(2005L, new Score.Value(11.6F,74.5F));
        value.put(2010L, new Score.Value(7.6F,72.3F));
        value.put(2015L, new Score.Value(6.9F,83F));
        scores.add(new Score(5L, 0L, 6L, value));
        value = new HashMap<>();
        value.put(2000L, new Score.Value(38.6F,79.6F));
        value.put(2005L, new Score.Value(28.3F,74.4F));
        value.put(2010L, new Score.Value(18.72F,75.7F));
        value.put(2015L, new Score.Value(11.72F,45.2F));
        scores.add(new Score(6L, 0L, 7L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(72.63F,21F));
        value.put(2000L, new Score.Value(64.9F,22.8F));
        value.put(2005L, new Score.Value(66.6F,24.9F));
        value.put(2010L, new Score.Value(52.5F,28.8F));
        value.put(2015L, new Score.Value(47F,35F));
        scores.add(new Score(7L, 0L, 8L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(40.23F,20.3F));
        value.put(2000L,  new Score.Value(44F,8.7F));
        value.put(2005L,  new Score.Value(58.9F,23.6F));
        value.put(2010L,  new Score.Value(66.3F,15F));
        value.put(2015L,  new Score.Value(64.6F,20.5F));
        scores.add(new Score(8L, 0L, 9L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(239F,2.6F));
        value.put(2000L,  new Score.Value(231F,0.8F));
        value.put(2005L,  new Score.Value(228.4F,0.7F));
        value.put(2010L,  new Score.Value(230.3F,1.4F));
        value.put(2015L,  new Score.Value(221.2F,6.1F));
        scores.add(new Score(9L, 0L, 10L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(862F,13.6F));
        value.put(2000L,  new Score.Value(928.1F,6.5F));
        value.put(2005L,  new Score.Value(1039F,2.4F));
        value.put(2010L,  new Score.Value(957.4F,4.2F));
        value.put(2015L,  new Score.Value(750.76F,23.5F));
        scores.add(new Score(10L, 0L, 11L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(185.1F,40.6F));
        value.put(2000L,  new Score.Value(192.5F,28F));
        value.put(2005L,  new Score.Value(206.6F,30.5F));
        value.put(2010L,  new Score.Value(151.7F,41.7F));
        value.put(2015L,  new Score.Value(109.8F,43.6F));
        scores.add(new Score(11L, 0L, 12L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(0F,78.8F));
        value.put(2000L,  new Score.Value(0F,90.1F));
        value.put(2005L,  new Score.Value(0F,62.2F));
        value.put(2010L,  new Score.Value(0F,67.9F));
        value.put(2015L,  new Score.Value(0F,59.4F));
        scores.add(new Score(12L, 0L, 13L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(50F,78.8F));
        value.put(2000L, new Score.Value(66.2F,90.1F));
        value.put(2005L, new Score.Value(62.86F,95.6F));
        value.put(2010L, new Score.Value(58.62F,94.8F));
        value.put(2015L, new Score.Value(43.26F,82.8F));
        scores.add(new Score(13L, 0L, 14L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(317.25F,69.3F));
        value.put(2010L, new Score.Value(326.2F,89.1F));
        value.put(2015L, new Score.Value(327.1F,91.3F));
        scores.add(new Score(14L, 0L, 15L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(25.2F,100F));
        value.put(2010L, new Score.Value(24.4F,100F));
        value.put(2015L, new Score.Value(25F,71F));
        scores.add(new Score(15L, 0L, 16L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(9.675F,22.6F));
        value.put(2010L, new Score.Value(10.2F,31F));
        value.put(2015L, new Score.Value(10.53F,39.6F));
        scores.add(new Score(16L, 0L, 17L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(22.5F,69.3F));
        value.put(2010L, new Score.Value(23.4F,89.1F));
        value.put(2015L, new Score.Value(23.8F,91.3F));
        scores.add(new Score(17L, 0L, 18L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(82.4F,53F));
        value.put(2010L, new Score.Value(83.7F,59.6F));
        value.put(2015L, new Score.Value(86.3F,29F));
        scores.add(new Score(18L, 0L, 19L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,20.2F));
        value.put(2000L, new Score.Value(0F,16.8F));
        value.put(2005L, new Score.Value(0F,19F));
        value.put(2010L, new Score.Value(0F,22.7F));
        value.put(2015L, new Score.Value(0F,32.3F));
        scores.add(new Score(19L, 0L, 20L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(-6.4F,20.3F));
        value.put(2000L, new Score.Value(-8.8F,16.9F));
        value.put(2005L, new Score.Value(-9.1F,8.6F));
        value.put(2010L, new Score.Value(-5.82F,14.3F));
        value.put(2015L, new Score.Value(-2.4F,8F));
        scores.add(new Score(20L, 0L, 21L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(62.2F,62.2F));
        value.put(2000L, new Score.Value(30F,30F));
        value.put(2005L, new Score.Value(29.9F,29.9F));
        value.put(2010L, new Score.Value(40.6F,40.6F));
        value.put(2015L, new Score.Value(80F,80F));
        scores.add(new Score(21L, 0L, 22L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(8.83F,56.6F));
        value.put(2000L, new Score.Value(7.28F,7.8F));
        value.put(2005L, new Score.Value(8.48F,18.5F));
        value.put(2010L, new Score.Value(10.1F,13.2F));
        value.put(2015L, new Score.Value(11.3F,8.8F));
        scores.add(new Score(22L, 0L, 23L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,93.5F));
        value.put(2000L, new Score.Value(0F,77F));
        value.put(2005L, new Score.Value(0F,59.3F));
        value.put(2010L, new Score.Value(0F,62.4F));
        value.put(2015L, new Score.Value(0F,49.5F));
        scores.add(new Score(23L, 0L, 24L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(252F,96.2F));
        value.put(2000L, new Score.Value(265.5F,83.3F));
        value.put(2005L, new Score.Value(271.4F,76.6F));
        value.put(2010L, new Score.Value(269.3F,77.9F));
        value.put(2015L, new Score.Value(270.8F,78.4F));
        scores.add(new Score(24L, 0L, 25L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(131F,90.8F));
        value.put(2000L, new Score.Value(124.2F,70.7F));
        value.put(2005L, new Score.Value(117.2F,69F));
        value.put(2010L, new Score.Value(103.2F,57.3F));
        value.put(2015L, new Score.Value(86.6F,31.3F));
        scores.add(new Score(25L, 0L, 26L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(50.9F,72.3F));
        value.put(2010L, new Score.Value(52.7F,71F));
        value.put(2015L, new Score.Value(50.8F,58F));
        scores.add(new Score(26L, 0L, 27L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(90.2F,19.1F));
        value.put(2010L, new Score.Value(91.2F,43.4F));
        value.put(2015L, new Score.Value(86.3F,30.2F));
        scores.add(new Score(27L, 0L, 28L, value));

        // СКФО
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 0F,80.3F));
        value.put(2000L, new Score.Value(0F, 76.8F));
        value.put(2005L, new Score.Value(0F, 50.3F));
        value.put(2010L, new Score.Value(0F, 59F));
        value.put(2015L, new Score.Value(0F, 62.8F));
        scores.add(new Score(0L, 0L, 1L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 73.32F, 74.6F));
        value.put(2000L, new Score.Value(73.2F, 87.1F));
        value.put(2005L, new Score.Value(72.89F, 59.5F));
        value.put(2010L, new Score.Value(74.7F, 65.4F));
        value.put(2015L, new Score.Value(76.6F, 66.7F));
        scores.add(new Score(1L, 0L, 2L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(60.8F, 85.9F));
        value.put(2000L, new Score.Value(60.72F, 66.4F));
        value.put(2005L, new Score.Value(59.6F, 41.1F));
        value.put(2010L, new Score.Value(59.6F, 52.5F));
        value.put(2015L, new Score.Value(59.6F, 58.8F));
        scores.add(new Score(2L, 0L, 3L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 30.5F));
        value.put(2000L, new Score.Value(0F, 29F));
        value.put(2005L, new Score.Value(0F,30.2F));
        value.put(2010L, new Score.Value(0F,31.4F));
        value.put(2015L, new Score.Value(0F,34.8F));
        scores.add(new Score(3L, 0L, 4L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(15.32F,26.6F));
        value.put(2000L, new Score.Value(16.08F,18.7F));
        value.put(2005L, new Score.Value(17.5F,10.2F));
        value.put(2010L, new Score.Value(15.56F,11.9F));
        value.put(2015L, new Score.Value(13.7F,21.6F));
        scores.add(new Score(4L, 0L, 5L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(16.7F,89.5F));
        value.put(2000L, new Score.Value(15.1F,68.9F));
        value.put(2005L, new Score.Value(11.6F,74.5F));
        value.put(2010L, new Score.Value(7.6F,72.3F));
        value.put(2015L, new Score.Value(6.9F,83F));
        scores.add(new Score(5L, 0L, 6L, value));
        value = new HashMap<>();
        value.put(2000L, new Score.Value(38.6F,79.6F));
        value.put(2005L, new Score.Value(28.3F,74.4F));
        value.put(2010L, new Score.Value(18.72F,75.7F));
        value.put(2015L, new Score.Value(11.72F,45.2F));
        scores.add(new Score(6L, 0L, 7L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(72.63F,21F));
        value.put(2000L, new Score.Value(64.9F,22.8F));
        value.put(2005L, new Score.Value(66.6F,24.9F));
        value.put(2010L, new Score.Value(52.5F,28.8F));
        value.put(2015L, new Score.Value(47F,35F));
        scores.add(new Score(7L, 0L, 8L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(40.23F,20.3F));
        value.put(2000L,  new Score.Value(44F,8.7F));
        value.put(2005L,  new Score.Value(58.9F,23.6F));
        value.put(2010L,  new Score.Value(66.3F,15F));
        value.put(2015L,  new Score.Value(64.6F,20.5F));
        scores.add(new Score(8L, 0L, 9L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(239F,2.6F));
        value.put(2000L,  new Score.Value(231F,0.8F));
        value.put(2005L,  new Score.Value(228.4F,0.7F));
        value.put(2010L,  new Score.Value(230.3F,1.4F));
        value.put(2015L,  new Score.Value(221.2F,6.1F));
        scores.add(new Score(9L, 0L, 10L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(862F,13.6F));
        value.put(2000L,  new Score.Value(928.1F,6.5F));
        value.put(2005L,  new Score.Value(1039F,2.4F));
        value.put(2010L,  new Score.Value(957.4F,4.2F));
        value.put(2015L,  new Score.Value(750.76F,23.5F));
        scores.add(new Score(10L, 0L, 11L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(185.1F,40.6F));
        value.put(2000L,  new Score.Value(192.5F,28F));
        value.put(2005L,  new Score.Value(206.6F,30.5F));
        value.put(2010L,  new Score.Value(151.7F,41.7F));
        value.put(2015L,  new Score.Value(109.8F,43.6F));
        scores.add(new Score(11L, 0L, 12L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(0F,78.8F));
        value.put(2000L,  new Score.Value(0F,90.1F));
        value.put(2005L,  new Score.Value(0F,62.2F));
        value.put(2010L,  new Score.Value(0F,67.9F));
        value.put(2015L,  new Score.Value(0F,59.4F));
        scores.add(new Score(12L, 0L, 13L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(50F,78.8F));
        value.put(2000L, new Score.Value(66.2F,90.1F));
        value.put(2005L, new Score.Value(62.86F,95.6F));
        value.put(2010L, new Score.Value(58.62F,94.8F));
        value.put(2015L, new Score.Value(43.26F,82.8F));
        scores.add(new Score(13L, 0L, 14L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(317.25F,69.3F));
        value.put(2010L, new Score.Value(326.2F,89.1F));
        value.put(2015L, new Score.Value(327.1F,91.3F));
        scores.add(new Score(14L, 0L, 15L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(25.2F,100F));
        value.put(2010L, new Score.Value(24.4F,100F));
        value.put(2015L, new Score.Value(25F,71F));
        scores.add(new Score(15L, 0L, 16L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(9.675F,22.6F));
        value.put(2010L, new Score.Value(10.2F,31F));
        value.put(2015L, new Score.Value(10.53F,39.6F));
        scores.add(new Score(16L, 0L, 17L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(22.5F,69.3F));
        value.put(2010L, new Score.Value(23.4F,89.1F));
        value.put(2015L, new Score.Value(23.8F,91.3F));
        scores.add(new Score(17L, 0L, 18L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(82.4F,53F));
        value.put(2010L, new Score.Value(83.7F,59.6F));
        value.put(2015L, new Score.Value(86.3F,29F));
        scores.add(new Score(18L, 0L, 19L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,20.2F));
        value.put(2000L, new Score.Value(0F,16.8F));
        value.put(2005L, new Score.Value(0F,19F));
        value.put(2010L, new Score.Value(0F,22.7F));
        value.put(2015L, new Score.Value(0F,32.3F));
        scores.add(new Score(19L, 0L, 20L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(-6.4F,20.3F));
        value.put(2000L, new Score.Value(-8.8F,16.9F));
        value.put(2005L, new Score.Value(-9.1F,8.6F));
        value.put(2010L, new Score.Value(-5.82F,14.3F));
        value.put(2015L, new Score.Value(-2.4F,8F));
        scores.add(new Score(20L, 0L, 21L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(62.2F,62.2F));
        value.put(2000L, new Score.Value(30F,30F));
        value.put(2005L, new Score.Value(29.9F,29.9F));
        value.put(2010L, new Score.Value(40.6F,40.6F));
        value.put(2015L, new Score.Value(80F,80F));
        scores.add(new Score(21L, 0L, 22L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(8.83F,56.6F));
        value.put(2000L, new Score.Value(7.28F,7.8F));
        value.put(2005L, new Score.Value(8.48F,18.5F));
        value.put(2010L, new Score.Value(10.1F,13.2F));
        value.put(2015L, new Score.Value(11.3F,8.8F));
        scores.add(new Score(22L, 0L, 23L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,93.5F));
        value.put(2000L, new Score.Value(0F,77F));
        value.put(2005L, new Score.Value(0F,59.3F));
        value.put(2010L, new Score.Value(0F,62.4F));
        value.put(2015L, new Score.Value(0F,49.5F));
        scores.add(new Score(23L, 0L, 24L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(252F,96.2F));
        value.put(2000L, new Score.Value(265.5F,83.3F));
        value.put(2005L, new Score.Value(271.4F,76.6F));
        value.put(2010L, new Score.Value(269.3F,77.9F));
        value.put(2015L, new Score.Value(270.8F,78.4F));
        scores.add(new Score(24L, 0L, 25L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(131F,90.8F));
        value.put(2000L, new Score.Value(124.2F,70.7F));
        value.put(2005L, new Score.Value(117.2F,69F));
        value.put(2010L, new Score.Value(103.2F,57.3F));
        value.put(2015L, new Score.Value(86.6F,31.3F));
        scores.add(new Score(25L, 0L, 26L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(50.9F,72.3F));
        value.put(2010L, new Score.Value(52.7F,71F));
        value.put(2015L, new Score.Value(50.8F,58F));
        scores.add(new Score(26L, 0L, 27L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(90.2F,19.1F));
        value.put(2010L, new Score.Value(91.2F,43.4F));
        value.put(2015L, new Score.Value(86.3F,30.2F));
        scores.add(new Score(27L, 0L, 28L, value));

        // ПФО
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 0F,80.3F));
        value.put(2000L, new Score.Value(0F, 76.8F));
        value.put(2005L, new Score.Value(0F, 50.3F));
        value.put(2010L, new Score.Value(0F, 59F));
        value.put(2015L, new Score.Value(0F, 62.8F));
        scores.add(new Score(0L, 0L, 1L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 73.32F, 74.6F));
        value.put(2000L, new Score.Value(73.2F, 87.1F));
        value.put(2005L, new Score.Value(72.89F, 59.5F));
        value.put(2010L, new Score.Value(74.7F, 65.4F));
        value.put(2015L, new Score.Value(76.6F, 66.7F));
        scores.add(new Score(1L, 0L, 2L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(60.8F, 85.9F));
        value.put(2000L, new Score.Value(60.72F, 66.4F));
        value.put(2005L, new Score.Value(59.6F, 41.1F));
        value.put(2010L, new Score.Value(59.6F, 52.5F));
        value.put(2015L, new Score.Value(59.6F, 58.8F));
        scores.add(new Score(2L, 0L, 3L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 30.5F));
        value.put(2000L, new Score.Value(0F, 29F));
        value.put(2005L, new Score.Value(0F,30.2F));
        value.put(2010L, new Score.Value(0F,31.4F));
        value.put(2015L, new Score.Value(0F,34.8F));
        scores.add(new Score(3L, 0L, 4L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(15.32F,26.6F));
        value.put(2000L, new Score.Value(16.08F,18.7F));
        value.put(2005L, new Score.Value(17.5F,10.2F));
        value.put(2010L, new Score.Value(15.56F,11.9F));
        value.put(2015L, new Score.Value(13.7F,21.6F));
        scores.add(new Score(4L, 0L, 5L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(16.7F,89.5F));
        value.put(2000L, new Score.Value(15.1F,68.9F));
        value.put(2005L, new Score.Value(11.6F,74.5F));
        value.put(2010L, new Score.Value(7.6F,72.3F));
        value.put(2015L, new Score.Value(6.9F,83F));
        scores.add(new Score(5L, 0L, 6L, value));
        value = new HashMap<>();
        value.put(2000L, new Score.Value(38.6F,79.6F));
        value.put(2005L, new Score.Value(28.3F,74.4F));
        value.put(2010L, new Score.Value(18.72F,75.7F));
        value.put(2015L, new Score.Value(11.72F,45.2F));
        scores.add(new Score(6L, 0L, 7L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(72.63F,21F));
        value.put(2000L, new Score.Value(64.9F,22.8F));
        value.put(2005L, new Score.Value(66.6F,24.9F));
        value.put(2010L, new Score.Value(52.5F,28.8F));
        value.put(2015L, new Score.Value(47F,35F));
        scores.add(new Score(7L, 0L, 8L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(40.23F,20.3F));
        value.put(2000L,  new Score.Value(44F,8.7F));
        value.put(2005L,  new Score.Value(58.9F,23.6F));
        value.put(2010L,  new Score.Value(66.3F,15F));
        value.put(2015L,  new Score.Value(64.6F,20.5F));
        scores.add(new Score(8L, 0L, 9L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(239F,2.6F));
        value.put(2000L,  new Score.Value(231F,0.8F));
        value.put(2005L,  new Score.Value(228.4F,0.7F));
        value.put(2010L,  new Score.Value(230.3F,1.4F));
        value.put(2015L,  new Score.Value(221.2F,6.1F));
        scores.add(new Score(9L, 0L, 10L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(862F,13.6F));
        value.put(2000L,  new Score.Value(928.1F,6.5F));
        value.put(2005L,  new Score.Value(1039F,2.4F));
        value.put(2010L,  new Score.Value(957.4F,4.2F));
        value.put(2015L,  new Score.Value(750.76F,23.5F));
        scores.add(new Score(10L, 0L, 11L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(185.1F,40.6F));
        value.put(2000L,  new Score.Value(192.5F,28F));
        value.put(2005L,  new Score.Value(206.6F,30.5F));
        value.put(2010L,  new Score.Value(151.7F,41.7F));
        value.put(2015L,  new Score.Value(109.8F,43.6F));
        scores.add(new Score(11L, 0L, 12L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(0F,78.8F));
        value.put(2000L,  new Score.Value(0F,90.1F));
        value.put(2005L,  new Score.Value(0F,62.2F));
        value.put(2010L,  new Score.Value(0F,67.9F));
        value.put(2015L,  new Score.Value(0F,59.4F));
        scores.add(new Score(12L, 0L, 13L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(50F,78.8F));
        value.put(2000L, new Score.Value(66.2F,90.1F));
        value.put(2005L, new Score.Value(62.86F,95.6F));
        value.put(2010L, new Score.Value(58.62F,94.8F));
        value.put(2015L, new Score.Value(43.26F,82.8F));
        scores.add(new Score(13L, 0L, 14L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(317.25F,69.3F));
        value.put(2010L, new Score.Value(326.2F,89.1F));
        value.put(2015L, new Score.Value(327.1F,91.3F));
        scores.add(new Score(14L, 0L, 15L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(25.2F,100F));
        value.put(2010L, new Score.Value(24.4F,100F));
        value.put(2015L, new Score.Value(25F,71F));
        scores.add(new Score(15L, 0L, 16L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(9.675F,22.6F));
        value.put(2010L, new Score.Value(10.2F,31F));
        value.put(2015L, new Score.Value(10.53F,39.6F));
        scores.add(new Score(16L, 0L, 17L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(22.5F,69.3F));
        value.put(2010L, new Score.Value(23.4F,89.1F));
        value.put(2015L, new Score.Value(23.8F,91.3F));
        scores.add(new Score(17L, 0L, 18L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(82.4F,53F));
        value.put(2010L, new Score.Value(83.7F,59.6F));
        value.put(2015L, new Score.Value(86.3F,29F));
        scores.add(new Score(18L, 0L, 19L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,20.2F));
        value.put(2000L, new Score.Value(0F,16.8F));
        value.put(2005L, new Score.Value(0F,19F));
        value.put(2010L, new Score.Value(0F,22.7F));
        value.put(2015L, new Score.Value(0F,32.3F));
        scores.add(new Score(19L, 0L, 20L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(-6.4F,20.3F));
        value.put(2000L, new Score.Value(-8.8F,16.9F));
        value.put(2005L, new Score.Value(-9.1F,8.6F));
        value.put(2010L, new Score.Value(-5.82F,14.3F));
        value.put(2015L, new Score.Value(-2.4F,8F));
        scores.add(new Score(20L, 0L, 21L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(62.2F,62.2F));
        value.put(2000L, new Score.Value(30F,30F));
        value.put(2005L, new Score.Value(29.9F,29.9F));
        value.put(2010L, new Score.Value(40.6F,40.6F));
        value.put(2015L, new Score.Value(80F,80F));
        scores.add(new Score(21L, 0L, 22L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(8.83F,56.6F));
        value.put(2000L, new Score.Value(7.28F,7.8F));
        value.put(2005L, new Score.Value(8.48F,18.5F));
        value.put(2010L, new Score.Value(10.1F,13.2F));
        value.put(2015L, new Score.Value(11.3F,8.8F));
        scores.add(new Score(22L, 0L, 23L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,93.5F));
        value.put(2000L, new Score.Value(0F,77F));
        value.put(2005L, new Score.Value(0F,59.3F));
        value.put(2010L, new Score.Value(0F,62.4F));
        value.put(2015L, new Score.Value(0F,49.5F));
        scores.add(new Score(23L, 0L, 24L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(252F,96.2F));
        value.put(2000L, new Score.Value(265.5F,83.3F));
        value.put(2005L, new Score.Value(271.4F,76.6F));
        value.put(2010L, new Score.Value(269.3F,77.9F));
        value.put(2015L, new Score.Value(270.8F,78.4F));
        scores.add(new Score(24L, 0L, 25L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(131F,90.8F));
        value.put(2000L, new Score.Value(124.2F,70.7F));
        value.put(2005L, new Score.Value(117.2F,69F));
        value.put(2010L, new Score.Value(103.2F,57.3F));
        value.put(2015L, new Score.Value(86.6F,31.3F));
        scores.add(new Score(25L, 0L, 26L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(50.9F,72.3F));
        value.put(2010L, new Score.Value(52.7F,71F));
        value.put(2015L, new Score.Value(50.8F,58F));
        scores.add(new Score(26L, 0L, 27L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(90.2F,19.1F));
        value.put(2010L, new Score.Value(91.2F,43.4F));
        value.put(2015L, new Score.Value(86.3F,30.2F));
        scores.add(new Score(27L, 0L, 28L, value));

        // УФО
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 0F,80.3F));
        value.put(2000L, new Score.Value(0F, 76.8F));
        value.put(2005L, new Score.Value(0F, 50.3F));
        value.put(2010L, new Score.Value(0F, 59F));
        value.put(2015L, new Score.Value(0F, 62.8F));
        scores.add(new Score(0L, 0L, 1L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 73.32F, 74.6F));
        value.put(2000L, new Score.Value(73.2F, 87.1F));
        value.put(2005L, new Score.Value(72.89F, 59.5F));
        value.put(2010L, new Score.Value(74.7F, 65.4F));
        value.put(2015L, new Score.Value(76.6F, 66.7F));
        scores.add(new Score(1L, 0L, 2L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(60.8F, 85.9F));
        value.put(2000L, new Score.Value(60.72F, 66.4F));
        value.put(2005L, new Score.Value(59.6F, 41.1F));
        value.put(2010L, new Score.Value(59.6F, 52.5F));
        value.put(2015L, new Score.Value(59.6F, 58.8F));
        scores.add(new Score(2L, 0L, 3L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 30.5F));
        value.put(2000L, new Score.Value(0F, 29F));
        value.put(2005L, new Score.Value(0F,30.2F));
        value.put(2010L, new Score.Value(0F,31.4F));
        value.put(2015L, new Score.Value(0F,34.8F));
        scores.add(new Score(3L, 0L, 4L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(15.32F,26.6F));
        value.put(2000L, new Score.Value(16.08F,18.7F));
        value.put(2005L, new Score.Value(17.5F,10.2F));
        value.put(2010L, new Score.Value(15.56F,11.9F));
        value.put(2015L, new Score.Value(13.7F,21.6F));
        scores.add(new Score(4L, 0L, 5L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(16.7F,89.5F));
        value.put(2000L, new Score.Value(15.1F,68.9F));
        value.put(2005L, new Score.Value(11.6F,74.5F));
        value.put(2010L, new Score.Value(7.6F,72.3F));
        value.put(2015L, new Score.Value(6.9F,83F));
        scores.add(new Score(5L, 0L, 6L, value));
        value = new HashMap<>();
        value.put(2000L, new Score.Value(38.6F,79.6F));
        value.put(2005L, new Score.Value(28.3F,74.4F));
        value.put(2010L, new Score.Value(18.72F,75.7F));
        value.put(2015L, new Score.Value(11.72F,45.2F));
        scores.add(new Score(6L, 0L, 7L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(72.63F,21F));
        value.put(2000L, new Score.Value(64.9F,22.8F));
        value.put(2005L, new Score.Value(66.6F,24.9F));
        value.put(2010L, new Score.Value(52.5F,28.8F));
        value.put(2015L, new Score.Value(47F,35F));
        scores.add(new Score(7L, 0L, 8L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(40.23F,20.3F));
        value.put(2000L,  new Score.Value(44F,8.7F));
        value.put(2005L,  new Score.Value(58.9F,23.6F));
        value.put(2010L,  new Score.Value(66.3F,15F));
        value.put(2015L,  new Score.Value(64.6F,20.5F));
        scores.add(new Score(8L, 0L, 9L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(239F,2.6F));
        value.put(2000L,  new Score.Value(231F,0.8F));
        value.put(2005L,  new Score.Value(228.4F,0.7F));
        value.put(2010L,  new Score.Value(230.3F,1.4F));
        value.put(2015L,  new Score.Value(221.2F,6.1F));
        scores.add(new Score(9L, 0L, 10L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(862F,13.6F));
        value.put(2000L,  new Score.Value(928.1F,6.5F));
        value.put(2005L,  new Score.Value(1039F,2.4F));
        value.put(2010L,  new Score.Value(957.4F,4.2F));
        value.put(2015L,  new Score.Value(750.76F,23.5F));
        scores.add(new Score(10L, 0L, 11L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(185.1F,40.6F));
        value.put(2000L,  new Score.Value(192.5F,28F));
        value.put(2005L,  new Score.Value(206.6F,30.5F));
        value.put(2010L,  new Score.Value(151.7F,41.7F));
        value.put(2015L,  new Score.Value(109.8F,43.6F));
        scores.add(new Score(11L, 0L, 12L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(0F,78.8F));
        value.put(2000L,  new Score.Value(0F,90.1F));
        value.put(2005L,  new Score.Value(0F,62.2F));
        value.put(2010L,  new Score.Value(0F,67.9F));
        value.put(2015L,  new Score.Value(0F,59.4F));
        scores.add(new Score(12L, 0L, 13L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(50F,78.8F));
        value.put(2000L, new Score.Value(66.2F,90.1F));
        value.put(2005L, new Score.Value(62.86F,95.6F));
        value.put(2010L, new Score.Value(58.62F,94.8F));
        value.put(2015L, new Score.Value(43.26F,82.8F));
        scores.add(new Score(13L, 0L, 14L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(317.25F,69.3F));
        value.put(2010L, new Score.Value(326.2F,89.1F));
        value.put(2015L, new Score.Value(327.1F,91.3F));
        scores.add(new Score(14L, 0L, 15L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(25.2F,100F));
        value.put(2010L, new Score.Value(24.4F,100F));
        value.put(2015L, new Score.Value(25F,71F));
        scores.add(new Score(15L, 0L, 16L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(9.675F,22.6F));
        value.put(2010L, new Score.Value(10.2F,31F));
        value.put(2015L, new Score.Value(10.53F,39.6F));
        scores.add(new Score(16L, 0L, 17L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(22.5F,69.3F));
        value.put(2010L, new Score.Value(23.4F,89.1F));
        value.put(2015L, new Score.Value(23.8F,91.3F));
        scores.add(new Score(17L, 0L, 18L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(82.4F,53F));
        value.put(2010L, new Score.Value(83.7F,59.6F));
        value.put(2015L, new Score.Value(86.3F,29F));
        scores.add(new Score(18L, 0L, 19L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,20.2F));
        value.put(2000L, new Score.Value(0F,16.8F));
        value.put(2005L, new Score.Value(0F,19F));
        value.put(2010L, new Score.Value(0F,22.7F));
        value.put(2015L, new Score.Value(0F,32.3F));
        scores.add(new Score(19L, 0L, 20L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(-6.4F,20.3F));
        value.put(2000L, new Score.Value(-8.8F,16.9F));
        value.put(2005L, new Score.Value(-9.1F,8.6F));
        value.put(2010L, new Score.Value(-5.82F,14.3F));
        value.put(2015L, new Score.Value(-2.4F,8F));
        scores.add(new Score(20L, 0L, 21L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(62.2F,62.2F));
        value.put(2000L, new Score.Value(30F,30F));
        value.put(2005L, new Score.Value(29.9F,29.9F));
        value.put(2010L, new Score.Value(40.6F,40.6F));
        value.put(2015L, new Score.Value(80F,80F));
        scores.add(new Score(21L, 0L, 22L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(8.83F,56.6F));
        value.put(2000L, new Score.Value(7.28F,7.8F));
        value.put(2005L, new Score.Value(8.48F,18.5F));
        value.put(2010L, new Score.Value(10.1F,13.2F));
        value.put(2015L, new Score.Value(11.3F,8.8F));
        scores.add(new Score(22L, 0L, 23L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,93.5F));
        value.put(2000L, new Score.Value(0F,77F));
        value.put(2005L, new Score.Value(0F,59.3F));
        value.put(2010L, new Score.Value(0F,62.4F));
        value.put(2015L, new Score.Value(0F,49.5F));
        scores.add(new Score(23L, 0L, 24L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(252F,96.2F));
        value.put(2000L, new Score.Value(265.5F,83.3F));
        value.put(2005L, new Score.Value(271.4F,76.6F));
        value.put(2010L, new Score.Value(269.3F,77.9F));
        value.put(2015L, new Score.Value(270.8F,78.4F));
        scores.add(new Score(24L, 0L, 25L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(131F,90.8F));
        value.put(2000L, new Score.Value(124.2F,70.7F));
        value.put(2005L, new Score.Value(117.2F,69F));
        value.put(2010L, new Score.Value(103.2F,57.3F));
        value.put(2015L, new Score.Value(86.6F,31.3F));
        scores.add(new Score(25L, 0L, 26L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(50.9F,72.3F));
        value.put(2010L, new Score.Value(52.7F,71F));
        value.put(2015L, new Score.Value(50.8F,58F));
        scores.add(new Score(26L, 0L, 27L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(90.2F,19.1F));
        value.put(2010L, new Score.Value(91.2F,43.4F));
        value.put(2015L, new Score.Value(86.3F,30.2F));
        scores.add(new Score(27L, 0L, 28L, value));

        // СФО
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 0F,80.3F));
        value.put(2000L, new Score.Value(0F, 76.8F));
        value.put(2005L, new Score.Value(0F, 50.3F));
        value.put(2010L, new Score.Value(0F, 59F));
        value.put(2015L, new Score.Value(0F, 62.8F));
        scores.add(new Score(0L, 0L, 1L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 73.32F, 74.6F));
        value.put(2000L, new Score.Value(73.2F, 87.1F));
        value.put(2005L, new Score.Value(72.89F, 59.5F));
        value.put(2010L, new Score.Value(74.7F, 65.4F));
        value.put(2015L, new Score.Value(76.6F, 66.7F));
        scores.add(new Score(1L, 0L, 2L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(60.8F, 85.9F));
        value.put(2000L, new Score.Value(60.72F, 66.4F));
        value.put(2005L, new Score.Value(59.6F, 41.1F));
        value.put(2010L, new Score.Value(59.6F, 52.5F));
        value.put(2015L, new Score.Value(59.6F, 58.8F));
        scores.add(new Score(2L, 0L, 3L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 30.5F));
        value.put(2000L, new Score.Value(0F, 29F));
        value.put(2005L, new Score.Value(0F,30.2F));
        value.put(2010L, new Score.Value(0F,31.4F));
        value.put(2015L, new Score.Value(0F,34.8F));
        scores.add(new Score(3L, 0L, 4L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(15.32F,26.6F));
        value.put(2000L, new Score.Value(16.08F,18.7F));
        value.put(2005L, new Score.Value(17.5F,10.2F));
        value.put(2010L, new Score.Value(15.56F,11.9F));
        value.put(2015L, new Score.Value(13.7F,21.6F));
        scores.add(new Score(4L, 0L, 5L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(16.7F,89.5F));
        value.put(2000L, new Score.Value(15.1F,68.9F));
        value.put(2005L, new Score.Value(11.6F,74.5F));
        value.put(2010L, new Score.Value(7.6F,72.3F));
        value.put(2015L, new Score.Value(6.9F,83F));
        scores.add(new Score(5L, 0L, 6L, value));
        value = new HashMap<>();
        value.put(2000L, new Score.Value(38.6F,79.6F));
        value.put(2005L, new Score.Value(28.3F,74.4F));
        value.put(2010L, new Score.Value(18.72F,75.7F));
        value.put(2015L, new Score.Value(11.72F,45.2F));
        scores.add(new Score(6L, 0L, 7L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(72.63F,21F));
        value.put(2000L, new Score.Value(64.9F,22.8F));
        value.put(2005L, new Score.Value(66.6F,24.9F));
        value.put(2010L, new Score.Value(52.5F,28.8F));
        value.put(2015L, new Score.Value(47F,35F));
        scores.add(new Score(7L, 0L, 8L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(40.23F,20.3F));
        value.put(2000L,  new Score.Value(44F,8.7F));
        value.put(2005L,  new Score.Value(58.9F,23.6F));
        value.put(2010L,  new Score.Value(66.3F,15F));
        value.put(2015L,  new Score.Value(64.6F,20.5F));
        scores.add(new Score(8L, 0L, 9L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(239F,2.6F));
        value.put(2000L,  new Score.Value(231F,0.8F));
        value.put(2005L,  new Score.Value(228.4F,0.7F));
        value.put(2010L,  new Score.Value(230.3F,1.4F));
        value.put(2015L,  new Score.Value(221.2F,6.1F));
        scores.add(new Score(9L, 0L, 10L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(862F,13.6F));
        value.put(2000L,  new Score.Value(928.1F,6.5F));
        value.put(2005L,  new Score.Value(1039F,2.4F));
        value.put(2010L,  new Score.Value(957.4F,4.2F));
        value.put(2015L,  new Score.Value(750.76F,23.5F));
        scores.add(new Score(10L, 0L, 11L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(185.1F,40.6F));
        value.put(2000L,  new Score.Value(192.5F,28F));
        value.put(2005L,  new Score.Value(206.6F,30.5F));
        value.put(2010L,  new Score.Value(151.7F,41.7F));
        value.put(2015L,  new Score.Value(109.8F,43.6F));
        scores.add(new Score(11L, 0L, 12L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(0F,78.8F));
        value.put(2000L,  new Score.Value(0F,90.1F));
        value.put(2005L,  new Score.Value(0F,62.2F));
        value.put(2010L,  new Score.Value(0F,67.9F));
        value.put(2015L,  new Score.Value(0F,59.4F));
        scores.add(new Score(12L, 0L, 13L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(50F,78.8F));
        value.put(2000L, new Score.Value(66.2F,90.1F));
        value.put(2005L, new Score.Value(62.86F,95.6F));
        value.put(2010L, new Score.Value(58.62F,94.8F));
        value.put(2015L, new Score.Value(43.26F,82.8F));
        scores.add(new Score(13L, 0L, 14L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(317.25F,69.3F));
        value.put(2010L, new Score.Value(326.2F,89.1F));
        value.put(2015L, new Score.Value(327.1F,91.3F));
        scores.add(new Score(14L, 0L, 15L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(25.2F,100F));
        value.put(2010L, new Score.Value(24.4F,100F));
        value.put(2015L, new Score.Value(25F,71F));
        scores.add(new Score(15L, 0L, 16L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(9.675F,22.6F));
        value.put(2010L, new Score.Value(10.2F,31F));
        value.put(2015L, new Score.Value(10.53F,39.6F));
        scores.add(new Score(16L, 0L, 17L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(22.5F,69.3F));
        value.put(2010L, new Score.Value(23.4F,89.1F));
        value.put(2015L, new Score.Value(23.8F,91.3F));
        scores.add(new Score(17L, 0L, 18L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(82.4F,53F));
        value.put(2010L, new Score.Value(83.7F,59.6F));
        value.put(2015L, new Score.Value(86.3F,29F));
        scores.add(new Score(18L, 0L, 19L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,20.2F));
        value.put(2000L, new Score.Value(0F,16.8F));
        value.put(2005L, new Score.Value(0F,19F));
        value.put(2010L, new Score.Value(0F,22.7F));
        value.put(2015L, new Score.Value(0F,32.3F));
        scores.add(new Score(19L, 0L, 20L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(-6.4F,20.3F));
        value.put(2000L, new Score.Value(-8.8F,16.9F));
        value.put(2005L, new Score.Value(-9.1F,8.6F));
        value.put(2010L, new Score.Value(-5.82F,14.3F));
        value.put(2015L, new Score.Value(-2.4F,8F));
        scores.add(new Score(20L, 0L, 21L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(62.2F,62.2F));
        value.put(2000L, new Score.Value(30F,30F));
        value.put(2005L, new Score.Value(29.9F,29.9F));
        value.put(2010L, new Score.Value(40.6F,40.6F));
        value.put(2015L, new Score.Value(80F,80F));
        scores.add(new Score(21L, 0L, 22L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(8.83F,56.6F));
        value.put(2000L, new Score.Value(7.28F,7.8F));
        value.put(2005L, new Score.Value(8.48F,18.5F));
        value.put(2010L, new Score.Value(10.1F,13.2F));
        value.put(2015L, new Score.Value(11.3F,8.8F));
        scores.add(new Score(22L, 0L, 23L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,93.5F));
        value.put(2000L, new Score.Value(0F,77F));
        value.put(2005L, new Score.Value(0F,59.3F));
        value.put(2010L, new Score.Value(0F,62.4F));
        value.put(2015L, new Score.Value(0F,49.5F));
        scores.add(new Score(23L, 0L, 24L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(252F,96.2F));
        value.put(2000L, new Score.Value(265.5F,83.3F));
        value.put(2005L, new Score.Value(271.4F,76.6F));
        value.put(2010L, new Score.Value(269.3F,77.9F));
        value.put(2015L, new Score.Value(270.8F,78.4F));
        scores.add(new Score(24L, 0L, 25L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(131F,90.8F));
        value.put(2000L, new Score.Value(124.2F,70.7F));
        value.put(2005L, new Score.Value(117.2F,69F));
        value.put(2010L, new Score.Value(103.2F,57.3F));
        value.put(2015L, new Score.Value(86.6F,31.3F));
        scores.add(new Score(25L, 0L, 26L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(50.9F,72.3F));
        value.put(2010L, new Score.Value(52.7F,71F));
        value.put(2015L, new Score.Value(50.8F,58F));
        scores.add(new Score(26L, 0L, 27L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(90.2F,19.1F));
        value.put(2010L, new Score.Value(91.2F,43.4F));
        value.put(2015L, new Score.Value(86.3F,30.2F));
        scores.add(new Score(27L, 0L, 28L, value));

        // ДФО
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 0F,80.3F));
        value.put(2000L, new Score.Value(0F, 76.8F));
        value.put(2005L, new Score.Value(0F, 50.3F));
        value.put(2010L, new Score.Value(0F, 59F));
        value.put(2015L, new Score.Value(0F, 62.8F));
        scores.add(new Score(0L, 0L, 1L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value( 73.32F, 74.6F));
        value.put(2000L, new Score.Value(73.2F, 87.1F));
        value.put(2005L, new Score.Value(72.89F, 59.5F));
        value.put(2010L, new Score.Value(74.7F, 65.4F));
        value.put(2015L, new Score.Value(76.6F, 66.7F));
        scores.add(new Score(1L, 0L, 2L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(60.8F, 85.9F));
        value.put(2000L, new Score.Value(60.72F, 66.4F));
        value.put(2005L, new Score.Value(59.6F, 41.1F));
        value.put(2010L, new Score.Value(59.6F, 52.5F));
        value.put(2015L, new Score.Value(59.6F, 58.8F));
        scores.add(new Score(2L, 0L, 3L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 30.5F));
        value.put(2000L, new Score.Value(0F, 29F));
        value.put(2005L, new Score.Value(0F,30.2F));
        value.put(2010L, new Score.Value(0F,31.4F));
        value.put(2015L, new Score.Value(0F,34.8F));
        scores.add(new Score(3L, 0L, 4L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(15.32F,26.6F));
        value.put(2000L, new Score.Value(16.08F,18.7F));
        value.put(2005L, new Score.Value(17.5F,10.2F));
        value.put(2010L, new Score.Value(15.56F,11.9F));
        value.put(2015L, new Score.Value(13.7F,21.6F));
        scores.add(new Score(4L, 0L, 5L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(16.7F,89.5F));
        value.put(2000L, new Score.Value(15.1F,68.9F));
        value.put(2005L, new Score.Value(11.6F,74.5F));
        value.put(2010L, new Score.Value(7.6F,72.3F));
        value.put(2015L, new Score.Value(6.9F,83F));
        scores.add(new Score(5L, 0L, 6L, value));
        value = new HashMap<>();
        value.put(2000L, new Score.Value(38.6F,79.6F));
        value.put(2005L, new Score.Value(28.3F,74.4F));
        value.put(2010L, new Score.Value(18.72F,75.7F));
        value.put(2015L, new Score.Value(11.72F,45.2F));
        scores.add(new Score(6L, 0L, 7L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(72.63F,21F));
        value.put(2000L, new Score.Value(64.9F,22.8F));
        value.put(2005L, new Score.Value(66.6F,24.9F));
        value.put(2010L, new Score.Value(52.5F,28.8F));
        value.put(2015L, new Score.Value(47F,35F));
        scores.add(new Score(7L, 0L, 8L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(40.23F,20.3F));
        value.put(2000L,  new Score.Value(44F,8.7F));
        value.put(2005L,  new Score.Value(58.9F,23.6F));
        value.put(2010L,  new Score.Value(66.3F,15F));
        value.put(2015L,  new Score.Value(64.6F,20.5F));
        scores.add(new Score(8L, 0L, 9L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(239F,2.6F));
        value.put(2000L,  new Score.Value(231F,0.8F));
        value.put(2005L,  new Score.Value(228.4F,0.7F));
        value.put(2010L,  new Score.Value(230.3F,1.4F));
        value.put(2015L,  new Score.Value(221.2F,6.1F));
        scores.add(new Score(9L, 0L, 10L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(862F,13.6F));
        value.put(2000L,  new Score.Value(928.1F,6.5F));
        value.put(2005L,  new Score.Value(1039F,2.4F));
        value.put(2010L,  new Score.Value(957.4F,4.2F));
        value.put(2015L,  new Score.Value(750.76F,23.5F));
        scores.add(new Score(10L, 0L, 11L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(185.1F,40.6F));
        value.put(2000L,  new Score.Value(192.5F,28F));
        value.put(2005L,  new Score.Value(206.6F,30.5F));
        value.put(2010L,  new Score.Value(151.7F,41.7F));
        value.put(2015L,  new Score.Value(109.8F,43.6F));
        scores.add(new Score(11L, 0L, 12L, value));
        value = new HashMap<>();
        value.put(1995L,  new Score.Value(0F,78.8F));
        value.put(2000L,  new Score.Value(0F,90.1F));
        value.put(2005L,  new Score.Value(0F,62.2F));
        value.put(2010L,  new Score.Value(0F,67.9F));
        value.put(2015L,  new Score.Value(0F,59.4F));
        scores.add(new Score(12L, 0L, 13L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(50F,78.8F));
        value.put(2000L, new Score.Value(66.2F,90.1F));
        value.put(2005L, new Score.Value(62.86F,95.6F));
        value.put(2010L, new Score.Value(58.62F,94.8F));
        value.put(2015L, new Score.Value(43.26F,82.8F));
        scores.add(new Score(13L, 0L, 14L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(317.25F,69.3F));
        value.put(2010L, new Score.Value(326.2F,89.1F));
        value.put(2015L, new Score.Value(327.1F,91.3F));
        scores.add(new Score(14L, 0L, 15L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(25.2F,100F));
        value.put(2010L, new Score.Value(24.4F,100F));
        value.put(2015L, new Score.Value(25F,71F));
        scores.add(new Score(15L, 0L, 16L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(9.675F,22.6F));
        value.put(2010L, new Score.Value(10.2F,31F));
        value.put(2015L, new Score.Value(10.53F,39.6F));
        scores.add(new Score(16L, 0L, 17L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(22.5F,69.3F));
        value.put(2010L, new Score.Value(23.4F,89.1F));
        value.put(2015L, new Score.Value(23.8F,91.3F));
        scores.add(new Score(17L, 0L, 18L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(82.4F,53F));
        value.put(2010L, new Score.Value(83.7F,59.6F));
        value.put(2015L, new Score.Value(86.3F,29F));
        scores.add(new Score(18L, 0L, 19L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,20.2F));
        value.put(2000L, new Score.Value(0F,16.8F));
        value.put(2005L, new Score.Value(0F,19F));
        value.put(2010L, new Score.Value(0F,22.7F));
        value.put(2015L, new Score.Value(0F,32.3F));
        scores.add(new Score(19L, 0L, 20L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(-6.4F,20.3F));
        value.put(2000L, new Score.Value(-8.8F,16.9F));
        value.put(2005L, new Score.Value(-9.1F,8.6F));
        value.put(2010L, new Score.Value(-5.82F,14.3F));
        value.put(2015L, new Score.Value(-2.4F,8F));
        scores.add(new Score(20L, 0L, 21L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(62.2F,62.2F));
        value.put(2000L, new Score.Value(30F,30F));
        value.put(2005L, new Score.Value(29.9F,29.9F));
        value.put(2010L, new Score.Value(40.6F,40.6F));
        value.put(2015L, new Score.Value(80F,80F));
        scores.add(new Score(21L, 0L, 22L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(8.83F,56.6F));
        value.put(2000L, new Score.Value(7.28F,7.8F));
        value.put(2005L, new Score.Value(8.48F,18.5F));
        value.put(2010L, new Score.Value(10.1F,13.2F));
        value.put(2015L, new Score.Value(11.3F,8.8F));
        scores.add(new Score(22L, 0L, 23L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F,93.5F));
        value.put(2000L, new Score.Value(0F,77F));
        value.put(2005L, new Score.Value(0F,59.3F));
        value.put(2010L, new Score.Value(0F,62.4F));
        value.put(2015L, new Score.Value(0F,49.5F));
        scores.add(new Score(23L, 0L, 24L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(252F,96.2F));
        value.put(2000L, new Score.Value(265.5F,83.3F));
        value.put(2005L, new Score.Value(271.4F,76.6F));
        value.put(2010L, new Score.Value(269.3F,77.9F));
        value.put(2015L, new Score.Value(270.8F,78.4F));
        scores.add(new Score(24L, 0L, 25L, value));
        value = new HashMap<>();
        value.put(1995L, new Score.Value(131F,90.8F));
        value.put(2000L, new Score.Value(124.2F,70.7F));
        value.put(2005L, new Score.Value(117.2F,69F));
        value.put(2010L, new Score.Value(103.2F,57.3F));
        value.put(2015L, new Score.Value(86.6F,31.3F));
        scores.add(new Score(25L, 0L, 26L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(50.9F,72.3F));
        value.put(2010L, new Score.Value(52.7F,71F));
        value.put(2015L, new Score.Value(50.8F,58F));
        scores.add(new Score(26L, 0L, 27L, value));
        value = new HashMap<>();
        value.put(2005L, new Score.Value(90.2F,19.1F));
        value.put(2010L, new Score.Value(91.2F,43.4F));
        value.put(2015L, new Score.Value(86.3F,30.2F));
        scores.add(new Score(27L, 0L, 28L, value));

        // КФО
        value = new HashMap<>(); value.put(2015L, new Score.Value(0F, 52.2F));
        scores.add(new Score(224L, 8L, 1L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(75.85F, 54.1F));
        scores.add(new Score(225L, 8L, 2L, value));
        value = new HashMap<>();  value.put(2015L, new Score.Value(65.6F, 50.3F));
        scores.add(new Score(226L, 8L, 3L, value));
        value = new HashMap<>();  value.put(2015L, new Score.Value(0F, 33.5F));
        scores.add(new Score(227L, 8L, 4L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(15.2F, 1.3F));
        scores.add(new Score(228L, 8L, 5L, value));
        value = new HashMap<>();  value.put(2015L, new Score.Value(6.1F, 91.9F));
        scores.add(new Score(229L, 8L, 6L, value));
        value = new HashMap<>();  value.put(2015L, new Score.Value(8.45F, 67.7F));
        scores.add(new Score(238L, 8L, 7L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(34.6F, 52.2F));
        scores.add(new Score(231L, 8L, 8L, value));
        value = new HashMap<>();  value.put(2015L, new Score.Value(77.1F, 5.1F));
        scores.add(new Score(232L, 8L, 9L, value));
        value = new HashMap<>();  value.put(2015L, new Score.Value(222.3F, 5.6F));
        scores.add(new Score(233L, 8L, 10L, value));
        value = new HashMap<>();  value.put(2015L, new Score.Value(981.34F, 12.4F));
        scores.add(new Score(234L,8L, 11L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(107.5F, 44.8F));
        scores.add(new Score(235L,8L, 12L, value));
        value = new HashMap<>(); value.put(2015L,  new Score.Value( 0F, 78.5F));
        scores.add(new Score(236L,8L, 13L, value));
        value = new HashMap<>();
        scores.add(new Score(237L,8L, 14L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(229.6F, 97.5F));
        scores.add(new Score(238L,8L, 15L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(12.1F, 98.7F));
        scores.add(new Score(239L,8L, 16L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(8.75F, 60.6F));
        scores.add(new Score(240L,8L, 17L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(30.1F, 49.3F));
        scores.add(new Score(241L,8L, 18L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(51.35F, 86.3F));
        scores.add(new Score(242L,8L, 19L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(0F, 29F));
        scores.add(new Score(243L,8L, 20L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value( -3.2F, 6.8F));
        scores.add(new Score(244L,8L, 21L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value( 0F, 48.5F));
        scores.add(new Score(245L,8L, 22L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(12.85F, 31.6F));
        scores.add(new Score(246L,8L, 23L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(0F, 30.2F));
        scores.add(new Score(247L,8L, 24L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(162.15F, 10.8F));
        scores.add(new Score(248L,8L, 25L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(79.4F, 14.7F));
        scores.add(new Score(249L,8L, 26L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(42.6F, 42.6F));
        scores.add(new Score(250L,8L, 27L, value));
        value = new HashMap<>(); value.put(2015L, new Score.Value(95.5F, 80.7F));
        scores.add(new Score(251L,8L, 28L, value));

        // индекс здоровья
        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 60.7F));
        value.put(2000L, new Score.Value(0F, 58F));
        value.put(2005L, new Score.Value(0F, 44.2F));
        value.put(2010L, new Score.Value(0F, 48.7F));
        value.put(2015L, new Score.Value(0F, 47.8F));
        scores.add(new Score(252L, 0L, 0L, value));

        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 62.1F));
        value.put(2000L, new Score.Value(0F, 54.6F));
        value.put(2005L, new Score.Value(0F, 39.4F));
        value.put(2010L, new Score.Value(0F, 44.6F));
        value.put(2015L, new Score.Value(0F, 48F));
        scores.add(new Score(253L, 1L, 0L, value));

        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 65.1F));
        value.put(2000L, new Score.Value(0F, 59.8F));
        value.put(2005L, new Score.Value(0F, 51F));
        value.put(2010L, new Score.Value(0F, 50.3F));
        value.put(2015L, new Score.Value(0F, 44.33F));
        scores.add(new Score(254L, 2L, 0L, value));

        value = new HashMap<>();
        value.put(2005L, new Score.Value(0F, 67.4F));
        value.put(2010L, new Score.Value(0F, 81.2F));
        value.put(2015L, new Score.Value(0F, 61.8F));
        scores.add(new Score(255L, 3L, 0L, value));

        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 60.6F));
        value.put(2000L, new Score.Value(0F, 54F));
        value.put(2005L, new Score.Value(0F, 40F));
        value.put(2010L, new Score.Value(0F, 39.8F));
        value.put(2015L, new Score.Value(0F, 42.7F));
        scores.add(new Score(256L, 4L, 0L, value));

        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 54.4F));
        value.put(2000L, new Score.Value(0F, 54.4F));
        value.put(2005L, new Score.Value(0F, 46.1F));
        value.put(2010L, new Score.Value(0F, 48.7F));
        value.put(2015L, new Score.Value(0F, 50F));
        scores.add(new Score(257L, 5L, 0L, value));

        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 43.5F));
        value.put(2000L, new Score.Value(0F, 36.2F));
        value.put(2005L, new Score.Value(0F, 36.9F));
        value.put(2010L, new Score.Value(0F, 37.9F));
        value.put(2015L, new Score.Value(0F, 40F));
        scores.add(new Score(258L, 6L, 0L, value));

        value = new HashMap<>();
        value.put(1995L, new Score.Value(0F, 52.8F));
        value.put(2000L, new Score.Value(0F, 42.9F));
        value.put(2005L, new Score.Value(0F, 42.9F));
        value.put(2010L, new Score.Value(0F, 36.8F));
        value.put(2015L, new Score.Value(0F, 41.1F));
        scores.add(new Score(259L, 7L, 0L, value));

        value = new HashMap<>();
        value.put(2015L, new Score.Value(0F, 44.7F));
        scores.add(new Score(260L, 8L, 0L, value));

        return scores;
    }

    public List<Indicator> getIndicators() {
        List<Indicator> indicators = new ArrayList<>();
        indicators.add(new Indicator(0L, "Индекс здоровья населения", null));
        indicators.add(new Indicator(1L, "Повышение продолжительности жизни", 0L));
        indicators.add(new Indicator(2L, "Ожидаемая продолжительность жизни (женщины)", 1L));
        indicators.add(new Indicator(3L, "Ожидаемая продолжительность жизни (мужчины)", 1L));
        indicators.add(new Indicator(4L, "Снижение уровня смертности", 0L));
        indicators.add(new Indicator(5L, "Число умерших на 1000 населения", 4L));
        indicators.add(new Indicator(6L, "Младенческая смертность", 4L));
        indicators.add(new Indicator(7L, "Коэффициент материнской смертности",  4L));
        indicators.add(new Indicator(8L, "Смертность по основным причинам (болезни органов дыхания)",  4L));
        indicators.add(new Indicator(9L, "Смертность по основным причинам (болезни органов пищеварения)",  4L));
        indicators.add(new Indicator(10L, "Смертность по основным причинам (новообразования)",  4L));
        indicators.add(new Indicator(11L, "Смертность по основным причинам (болезни системы кровообращения)",  4L));
        indicators.add(new Indicator(12L, "Смертность по основным причинам (внешние причины)",  4L));
        indicators.add(new Indicator(13L, "Снижение уровня заболеваемости", 0L));
        indicators.add(new Indicator(14L, "Заболеваемость туберкулезом", 13L));
        indicators.add(new Indicator(15L, "Заболеваемость по основным причинам (болезни органов дыхания)", 13L));
        indicators.add(new Indicator(16L, "Заболеваемость по основным причинам (болезни органов пищеварения)", 13L));
        indicators.add(new Indicator(17L, "Заболеваемость по основным причинам (новообразования)", 13L));
        indicators.add(new Indicator(18L, "Заболеваемоть по основным причинам (болезни системы кровообращения)", 13L));
        indicators.add(new Indicator(19L, "Заболеваемость по основным причинам (внешние причины)", 13L));
        indicators.add(new Indicator(20L, "Увеличение уровня рождаемости", 0L));
        indicators.add(new Indicator(21L, "Естественный прирост населения", 20L));
        indicators.add(new Indicator(22L, "Подростковая фертильность", 20L));
        indicators.add(new Indicator(23L, "Число родившихся на 1000 населения", 20L));
        indicators.add(new Indicator(24L, "Улучшение системы здравоохранения", 0L));
        indicators.add(new Indicator(25L, "Обеспеченность амбулаторно-поликлиническими учреждениями", 24L));
        indicators.add(new Indicator(26L, "Обеспеченность больничными койками", 24L));
        indicators.add(new Indicator(27L, "Обеспеченность населения врачами", 24L));
        indicators.add(new Indicator(28L, "Обеспеченность населения средним медицинским персоналом", 24L));
        return indicators;
    }

    public List<Long> getYears() {
        List<Long> years = new ArrayList<>();
        years.add(1990L);
        return years;
    }
}
