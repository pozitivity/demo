/** * Created by Tatyana on 14.04.2016. */module.exports = (app) => {    app.controller('PyramidController', PyramidController)    ;}PyramidController.inject = ['$translate', 'Pyramid'];function PyramidController($translate, Pyramid) {    let ctrl = this;    ctrl.columns = [];    console.log('[OK] PyramidController init');    Pyramid.find('byyear').then( function(pyramid) {        ctrl.columns = pyramid;        ctrl.draw(ctrl.columns);    });    ctrl.draw = (data) => {        var margin = { top: 20, right: 40, bottom: 30, left: 20},            width = 960 - margin.left - margin.right,            height = 500 - margin.top - margin.bottom,            barWidth = Math.floor(width / 7) - 1;        var x = d3.scale.linear()            .range([barWidth / 2, width - barWidth / 2]);        var y = d3.scale.linear()            .range([height, 0]);        var yAxis = d3.svg.axis()            .scale(y)            .orient("right")            .tickSize(-width)            .tickFormat(function(d) { return Math.round(d) + "M"; });// An SVG element with a bottom-right origin.        var svg = d3.select("#pyramid").append("svg")           .attr("width", width + margin.left + margin.right)           .attr("height", height + margin.top + margin.bottom)           .append("g")           .attr("transform", "translate(" + margin.left + "," + margin.top + ")");        var birthyears = svg.append("g")            .attr("class", "birthyears");//A label for the current year.       var title = svg.append("text")           .attr("class", "title")           .attr("dy", ".71em")           .text(2000);       data.forEach((d) => {           d.year = +d.year;           d.patients = +d.patients;           d.month = +d.month;       });       var month1 = d3.max(data, function(d) { return d.month; }),           year0 = d3.min(data, function(d) { return d.year; }),           year1 = d3.max(data, function(d) { return d.year; }),           year = year1;       // Update the scale domains.       x.domain([year1 - year0, year1]);       y.domain([0, d3.max(data, function(d) { return d.patients; })]);       // Produce a map from year and birthyear to [male, female].       data = d3.nest()           .key(function(d) { return d.year; })           .key(function(d) { return d.year; })           .rollup(function(v) { return v.map(function(d) { return d.patients; }); })           .map(data);       var countYear = year1 - year0;       // Add an axis to show the population values.       svg.append("g")           .attr("class", "y axis")           .attr("transform", "translate(" + width + ",0)")           .call(yAxis)           .selectAll("g")           .filter(function(value) { return !value; })           .classed("zero", true);       // Add labeled rects for each birthyear (so that no enter or exit is required).       var birthyear = birthyears.selectAll(".birthyear")           .data(d3.range(year0, year1 + 1, 1))           .enter().append("g")           .attr("class", "birthyear")           .attr("transform", function(birthyear) { return "translate(" + (countYear - year1 + birthyear) * 900 / countYear + ",0)"; });       console.log(birthyear);       birthyear.selectAll("rect")           .data(function(birthyear) { return data[year][birthyear] || [0, 0]; })           .enter().append("rect")           .attr("x", -barWidth / 2)           .attr("width", barWidth)           .attr("y", y)           .attr("height", function(value) { return height - y(value); });       // Add labels to show birthyear.       birthyear.append("text")           .attr("y", height - 4)           .text(function(birthyear) { return birthyear; });       // Add labels to show age (separate; not animated).       svg.selectAll(".age")           .data(d3.range(0, month1 + 1, 5))           .enter().append("text")           .attr("class", "age")           .attr("x", function(month) { return x(year - month); })           .attr("y", height + 4)           .attr("dy", ".71em")           .text(function(month) { return month; });       // Allow the arrow keys to change the displayed year.       window.focus();       d3.select(window).on("keydown", function() {           switch (d3.event.keyCode) {               case 37: year = Math.max(year0, year - 10); break;               case 39: year = Math.min(year1, year + 10); break;           }           ctrl.update(data);       });    }    ctrl.update =(data) => {        console.log(year);        if (!(year in data)) return;        title.text(year);        birthyears.transition()            .duration(750)            .attr("transform", "translate(" + (x(year1) - x(year)) + ",0)");        birthyear.selectAll("rect")            .data(function(birthyear) { return data[year][birthyear] || [0, 0]; })            .transition()            .duration(750)            .attr("y", y)            .attr("height", function(value) { return height - y(value); });    }}